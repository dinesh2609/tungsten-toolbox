#!/bin/bash
# (C) Copyright 2012,2013 Continuent, Inc - Released under the New BSD License
# Version 1.0.5 - 2013-04-03
cookbook_dir=$(dirname $0)

if [ -f $cookbook_dir/../CURRENT_TOPOLOGY ]
then
    echo "There is already a cluster installed - Can't proceed."
    echo -n "Currently installed topology: "
    cat $cookbook_dir/../CURRENT_TOPOLOGY
    exit 1
fi


INSTALL_LOG=install_log.txt
TEST_LOG=test_log.txt

echo "# `date`" > $INSTALL_LOG
echo "# `date`" > $TEST_LOG

exportVERBOSE=1
exit_code=0
for TOPOLOGY in master_slave fan_in all_masters star 
do
    for METHOD in tungsten_installer tpm
    do
        if [ "$METHOD" == "tpm" ]
        then
            export USE_TPM=1
            rm -f deploy.cfg*
        else
            unset USE_TPM
        fi
        echo "# $TOPOLOGY (using $METHOD)" 
        echo "# $TOPOLOGY" >> $INSTALL_LOG
        echo "# $TOPOLOGY" >> $TEST_LOG
        UCTOPOLOGY=$(perl -e "print uc '$TOPOLOGY'")
        $cookbook_dir/install_$TOPOLOGY >> $INSTALL_LOG 
        exit_code=$?
        if [ "$exit_code" != "0" ]
        then
            echo "# ERROR installing $TOPOLOGY (using $METHOD)"
            cat $INSTALL_LOG
            exit $exit_code
        fi
        if [ -f /tmp/test_log$$ ] ; then rm /tmp/test_log$$ ; fi
        . $cookbook_dir/BOOTSTRAP.sh NODES_$UCTOPOLOGY.sh
        if [ -n "$TEST_UNDER_LOAD" ]
        then
            $cookbook_dir/load_data >> $INSTALL_LOG
        fi
        for MODE in row statement
        do
            for MASTER in ${MASTERS[*]}
            do
                $MYSQL -h $MASTER -e "set global binlog_format=$MODE"
            done 
            echo "# testing with binlog_format=$MODE" >> /tmp/test_log$$ 
            echo "# testing with binlog_format=$MODE" 
            $cookbook_dir/show_cluster 
            $cookbook_dir/show_cluster >> $INSTALL_LOG
            ##############################################
            $cookbook_dir/test_cluster >> /tmp/test_log$$
            exit_code=$?
            if [ "$exit_code" != "0" ]
            then
                echo "# ERROR testing $TOPOLOGY (using $METHOD)"
                cat /tmp/test_log$$
                exit $exit_code
            fi
            ##############################################
            $cookbook_dir/show_cluster 
            $cookbook_dir/show_cluster >> $INSTALL_LOG
            cat /tmp/test_log$$ >> $TEST_LOG
        done
        if [ -n "$TEST_UNDER_LOAD" ]
        then
            export LOAD_TEST_OPTIONS="--remove=all"
            $cookbook_dir/load_data stop >> $INSTALL_LOG
            unset LOAD_TEST_OPTIONS
        fi

        cat /tmp/test_log$$
        rm /tmp/test_log$$
        export I_WANT_TO_UNINSTALL=1
        export STOP_REPLICATORS=1
        export REMOVE_TUNGSTEN_BASE=1
        export REMOVE_SERVICE_SCHEMA=1
        export REMOVE_TEST_SCHEMAS=1
        export CLEAN_NODE_DATABASE_SERVER=1
        $cookbook_dir/clear_cluster >> $INSTALL_LOG
        unset I_WANT_TO_UNINSTALL
        # Making sure that all the remaining processes are removed
        pkill -9 wrapper
        pkill -9 java 
    done
done

OK=$(grep "^ok" $TEST_LOG| wc -l)
NOTOK=$(grep "^not ok" $TEST_LOG | wc -l)
if [ -z "$OK" ] ; then OK='0' ; fi
if [ -z "$NOTOK" ] ; then NOTOK='0' ; fi
TESTS=$(($OK+$NOTOK))
echo ""

PASSED_PERCENTAGE=$(ruby -e 'printf "%6.2f", eval(ARGV[0])' "$OK.0/$TESTS.0*100" )
FAILED_PERCENTAGE=$(ruby -e 'printf "%6.2f", eval(ARGV[0])' "$NOTOK.0/$TESTS.0*100" )
echo "# tests : $TESTS"
echo "# pass  : $OK ($PASSED_PERCENTAGE%)"
echo "# fail  : $NOTOK ($FAILED_PERCENTAGE%)"

#
# The desired number of NOT OK tests is 0.
# We exit with this number, which will make the test fail if there were any 'not ok' in the results
#
exit $NOTOK
