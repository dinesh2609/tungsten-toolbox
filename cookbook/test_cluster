#!/bin/bash
# (C) Copyright 2012,2013 Continuent, Inc - Released under the New BSD License
# Version 1.0.5 - 2013-04-03

cookbook_dir=$(dirname $0)

if [ ! -f $cookbook_dir/../CURRENT_TOPOLOGY ]
then
    echo "This command requires an installed cluster"
    exit 1
fi

TOPOLOGY=$(echo $(cat CURRENT_TOPOLOGY) | tr '[a-z]' '[A-Z]')

NODES=NODES_$TOPOLOGY.sh

if [ ! -f $cookbook_dir/BOOTSTRAP.sh ]
then
    echo "$cookbook_dir/BOOTSTRAP.sh not found"
    exit 1
fi

if [ ! -f $cookbook_dir/utilities.sh ]
then
    echo "$cookbook_dir/utilities.sh not found"
    exit 1
fi

. $cookbook_dir/BOOTSTRAP.sh $NODES
. $cookbook_dir/utilities.sh

HOW_MANY_NODES=${#ALL_NODES[*]}
HOW_MANY_MASTERS=${#MASTERS[*]}
HOW_MANY_SLAVES=${#SLAVES[*]}

case $TOPOLOGY in
    MASTER_SLAVE)
        EXPECTED_SERVICES_MASTER=1    
        EXPECTED_SERVICES_SLAVE=1    
    ;;
    FAN_IN)
        EXPECTED_SERVICES_MASTER=1    
        EXPECTED_SERVICES_SLAVE=$(($HOW_MANY_MASTERS-1))
    ;;
    
    STAR)
        EXPECTED_SERVICES_MASTER=1    
        EXPECTED_SERVICES_SLAVE=1
        EXPECTED_SERVICES_HUB=$(($HOW_MANY_MASTERS-1))
    ;;
    ALL_MASTERS)
        EXPECTED_SERVICES_MASTER=1
        EXPECTED_SERVICES_SLAVE=$(($HOW_MANY_MASTERS-1))
    ;;
esac

fill_roles

## MYSQL is defined in BOOTSTRAP.sh
# 

echo "# $LONG_LINE"
echo "# Testing cluster with installed topology '$TOPOLOGY'"
echo "# $LONG_LINE"

TESTS=0
PASSED=0
FAILED=0

function ok_equal
{
    fact=$1
    expected=$2
    msg=$3
    # echo "++ <$1> <$2> <$3>"
    if [ "$fact" == "$expected" ]
    then
        echo -n "ok"
        PASSED=$(($PASSED+1))
    else
        echo -n "not ok"
        FAILED=$(($FAILED+1))
    fi
    echo " - $msg"
    TESTS=$(($TESTS+1))
}


function ok_greater
{
    fact=$1
    expected=$2
    msg=$3
    if [ $fact -ge $expected ]
    then
        echo -n "ok"
        PASSED=$(($PASSED+1))
    else
        echo -n "not ok"
        FAILED=$(($FAILED+1))
    fi
    echo " - $msg"
    TESTS=$(($TESTS+1))
}

for NODE in ${ALL_NODES[*]}
do
    for SERVICE in $($TREPCTL -host $NODE services | grep -w serviceName | awk '{print $3}')
    do
        STATE=$($TREPCTL -host $NODE -service $SERVICE status | grep -w state | awk '{print $3}')
        ok_equal $STATE ONLINE "Node $NODE - Service $SERVICE is running ($STATE)"
    done
done

DATA_POSTFIX=''
DDL_POSTFIX=''
MYSQL_VERSION=$($MYSQL -h ${MASTERS[0]} -BN -e 'select @@version'| perl -lne 'print $1 if /(\d+\.\d+)/')
if [ -z "$MYSQL_VERSION" ]
then
    echo "error detecting MySQL version"
    exit 1
fi
if [ "$MYSQL_VERSION" == "5.7" ]
then
    MYSQL_VERSION='5.6'
fi

ITERATIONS=1
DATA_POSTFIXES=('')
DDL_POSTFIXES=('')

if [ "$MYSQL_VERSION" == "5.6" ]
then
    DATA_POSTFIXES=('.0' '.01'  '.012' '.0123' '.01234' '.012345')
    DDL_POSTFIXES=( '(1)' '(2)' '(3)' '(4)' '(5)' '(6)' )
    ITERATIONS=6
fi

COUNTER=0
for ITER in $(seq 1 $ITERATIONS)
do
    DATA_POSTFIX=${DATA_POSTFIXES[$COUNTER]}
    DDL_POSTFIX=${DDL_POSTFIXES[$COUNTER]}
    # echo "# data: <$DATA_POSTFIX> ddl: <$DDL_POSTFIX> counter: <$COUNTER> iter: <$ITER>"
    COUNTER=$(($COUNTER+1))

SAMPLE_BLOB="%!+?/.,[]{}()*^&#@-_=abcdefghi0123456789"
SAMPLE_T=xyz
# SAMPLE_F=1.512345678901234
SAMPLE_F=1.012345678901234
SAMPLE_D=1969-09-01
SAMPLE_TIME=12:13:56$DATA_POSTFIX
SAMPLE_DT="2003-04-26 09:15:57$DATA_POSTFIX"
SAMPLE_TS="2003-04-26 09:15:58$DATA_POSTFIX"

COUNT=0
for NODE in ${MASTERS[*]} 
do 
    COUNT=$(($COUNT+1))
    if [ -n "$BINLOG_FORMAT" ]
    then
        echo "# Setting binlog format to '$BINLOG_FORMAT'"
        $MYSQL -h $NODE -e "set global binlog_format=$BINLOG_FORMAT"
    fi
    $MYSQL -h $NODE -e "drop table if exists test.t$COUNT"
    $MYSQL -h $NODE -e "drop table if exists test.v$COUNT"
    $MYSQL -h $NODE -e "create table test.t$COUNT(id int not null primary key, c char(20), b blob, t text, ti time$DDL_POSTFIX, d date, dt datetime$DDL_POSTFIX, ts timestamp$DDL_POSTFIX, f double(20,15)) engine=innodb"
    $MYSQL -h $NODE -e "create or replace view test.v$COUNT as select * from test.t$COUNT"
    $MYSQL -h $NODE -e "insert into test.v$COUNT values (1, 'inserted by node #$COUNT', '$SAMPLE_BLOB', '$SAMPLE_T', '$SAMPLE_TIME', '$SAMPLE_D', '$SAMPLE_DT', '$SAMPLE_TS', $SAMPLE_F)"
    # echo "############"
    # $MYSQL -h $NODE -e "select * from test.v$COUNT"
    # echo "############"

    HOW_MANY_SERVICES=$($TREPCTL -host $NODE services | grep role | grep master| wc -l)
    # echo "#M> $HOW_MANY_SERVICES"
    ok_greater $HOW_MANY_SERVICES $EXPECTED_SERVICES_MASTER "Master $NODE has at least $EXPECTED_SERVICES_MASTER master services"
    
    if [ -n "$HUB" ]
    then
        if [ -n "$EXPECTED_SERVICES_HUB" ]
        then
            if [ "$NODE" == "$HUB" ]
            then
                HOW_MANY_SERVICES=$($TREPCTL -host $NODE services | grep role |grep slave | wc -l)
                # echo "#H> $HOW_MANY_SERVICES"
                ok_greater $HOW_MANY_SERVICES $EXPECTED_SERVICES_HUB "HUB $NODE has at least $EXPECTED_SERVICES_HUB slave services"
            fi
        fi
    fi
done

sleep 2
# set -x
for SLAVE in ${SLAVES[*]} 
do
    echo "# slave: $SLAVE"
    COUNT=0
    for NODE in ${MASTERS[*]} 
    do 
        COUNT=$(($COUNT+1))
        TABLE_COUNT=$($MYSQL -BN -h $NODE -e "select count(*) from information_schema.tables where table_schema='test' and  table_name = 't$COUNT'")
        VIEW_COUNT=$($MYSQL -BN -h $NODE -e "select count(*) from information_schema.tables where table_schema='test' and  table_name = 'v$COUNT'")
        RECORD_COUNT=$($MYSQL -BN -h $NODE -e "select count(*) from test.t$COUNT where c = 'inserted by node #$COUNT' ")
        BLOB_CONTENT=$($MYSQL -BN -h $NODE -e "select b from test.t$COUNT where c = 'inserted by node #$COUNT' ")
        TEXT_CONTENT=$($MYSQL -BN -h $NODE -e "select t from test.t$COUNT where c = 'inserted by node #$COUNT' ")
        DATE_CONTENT=$($MYSQL -BN -h $NODE -e "select d from test.t$COUNT where c = 'inserted by node #$COUNT' ")
        TIME_CONTENT=$($MYSQL -BN -h $NODE -e "select ti from test.t$COUNT where c = 'inserted by node #$COUNT' ")
        DT_CONTENT=$($MYSQL -BN -h $NODE -e "select dt from test.t$COUNT where c = 'inserted by node #$COUNT' ")
        TS_CONTENT=$($MYSQL -BN -h $NODE -e "select ts from test.t$COUNT where c = 'inserted by node #$COUNT' ")
        F_CONTENT=$($MYSQL -BN -h $NODE -e "select f from test.t$COUNT where c = 'inserted by node #$COUNT' ")
        ok_equal $TABLE_COUNT 1 "Tables from master #$COUNT"
        ok_equal $VIEW_COUNT 1 "Views from master #$COUNT"
        ok_equal $RECORD_COUNT 1 "Records from master #$COUNT : <$RECORD_COUNT>"
        ok_equal $BLOB_CONTENT "$SAMPLE_BLOB" "Blob from master #$COUNT : <$BLOB_CONTENT>"
        ok_equal $TEXT_CONTENT "$SAMPLE_T" "Text from master #$COUNT : <$TEXT_CONTENT>"
        ok_equal $DATE_CONTENT "$SAMPLE_D" "Date from master #$COUNT : <$DATE_CONTENT>"
        ok_equal $TIME_CONTENT "$SAMPLE_TIME" "Time from master #$COUNT : <$TIME_CONTENT>"
        ok_equal "$DT_CONTENT" "$SAMPLE_DT" "Datetime from master #$COUNT : <$DT_CONTENT>"
        ok_equal "$TS_CONTENT" "$SAMPLE_TS" "Timestamp from master #$COUNT : <$TS_CONTENT>"
        ok_equal "$F_CONTENT" "$SAMPLE_F" "Double from master #$COUNT : <$F_CONTENT>"
        # $MYSQL -h $NODE -e "select * from test.t$COUNT"
    done
    HOW_MANY_SERVICES=$($TREPCTL -host $SLAVE services | grep role | grep slave| wc -l)
    # echo "#S> $HOW_MANY_SERVICES"
    ok_greater  $HOW_MANY_SERVICES $EXPECTED_SERVICES_SLAVE "Slave $SLAVE has at least $EXPECTED_SERVICES_SLAVE services"
done

done  # iter

printf "# passed: %4d (%6.2f%%)\n" $PASSED $(($PASSED/$TESTS*100))
printf "# failed: %4d (%6.2f%%)\n" $FAILED $(($FAILED/$TESTS*100))

echo "1..$TESTS"
